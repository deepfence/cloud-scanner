AWSTemplateFormatVersion: 2010-09-09
Description: Deepfence Cloud Scanner Organization Deployment - AWS
Resources:
  OrgAccIds:
    Type: 'Custom::OrgAccIds'
    Properties:
      ServiceToken: !GetAtt
      - OrgAccIdsInfoFunction
      - Arn
  OrgAccIdsInfoFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          import re
          import boto3
          import json
          import cfnresponse
          def parse_account_id(arn):
            regex = r'^.*:(\d+):(root|user)\/.*$'
            acc_id = re.findall(regex, arn)
            if acc_id:
              return acc_id[0][0]
            return None
          def members(event, context):
            client = boto3.client('organizations')
            root_accounts = []
            next_token = None
          
            while True:
              if next_token:
                resp = client.list_roots(MaxResults=20, NextToken=next_token)
              else:
                resp = client.list_roots(MaxResults=20)
              if not resp.get('Roots', []):
                break
              root_accounts.extend(resp['Roots'])
              if 'NextToken' in resp:
                next_token = resp['NextToken']
              else:
                break
            root_account_ids = []
            for root_account in root_accounts:
              acc_id = parse_account_id(root_account['Arn'])
              if acc_id:
                root_account_ids.append(acc_id)
            accounts = []
            next_token = None
            while True:
              if next_token:
                resp = client.list_accounts(MaxResults=20, NextToken=next_token)
              else:
                resp = client.list_accounts(MaxResults=20)
              if not resp.get('Accounts', []):
                break
              for acc in resp['Accounts']:
                if acc['Id'] not in root_account_ids:
                  accounts.append(acc)
              if 'NextToken' in resp:
                next_token = resp['NextToken']
              else:
                break
            accountIds = {'Members': ','.join([i['Id'] for i in accounts])}
            cfnresponse.send(event, context, cfnresponse.SUCCESS, accountIds)
      Handler: index.members
      Role: !GetAtt
      - LambdaExecutionRole
      - Arn
      Runtime: python3.9
      Timeout: '600'
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument: >-
        {"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":["lambda.amazonaws.com"]},"Action":["sts:AssumeRole"]}]}
      Path: /
      Policies:
      - PolicyName: root
        PolicyDocument: >-
          {"Version":"2012-10-17","Statement":[{"Effect":"Allow","Action":["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"],"Resource":"arn:aws:logs:*:*:*"},{"Effect":"Allow","Action":["organizations:ListRoots","organizations:ListAccounts"],"Resource":"*"}]}
Outputs:
  MemberAccounts:
    Value: !GetAtt
    - OrgAccIds
    - Members
